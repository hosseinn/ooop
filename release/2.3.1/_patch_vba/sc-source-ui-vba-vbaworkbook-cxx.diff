--- sc/source/ui/vba/vbaworkbook.cxx	
+++ sc/source/ui/vba/vbaworkbook.cxx
@@ -35,6 +35,7 @@
 #include "helperdecl.hxx"
 #include <tools/urlobj.hxx>
 #include <comphelper/unwrapargs.hxx>
+#include <cppuhelper/implbase3.hxx>
 
 #include <com/sun/star/util/XModifiable.hpp>
 #include <com/sun/star/util/XProtectable.hpp>
@@ -45,6 +46,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <org/openoffice/excel/XlFileFormat.hpp>
 
+#include "scextopt.hxx"
 #include "vbaworksheet.hxx"
 #include "vbaworksheets.hxx"
 #include "vbaworkbook.hxx"
@@ -71,6 +73,90 @@ uno::Reference< frame::XModel > 
 lcl_getModelFromArgs( uno::Sequence< uno::Any > const& args ) throw ( lang::IllegalArgumentException );
 };
 
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > SheetEnumeration_BASE;
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, container::XIndexAccess, container::XEnumerationAccess > SheetCollectionHelper_BASE;
+// a map ( or hashmap ) wont do as we need also to preserve the order 
+// (as added ) of the items
+typedef std::vector< uno::Reference< sheet::XSpreadsheet > >  SheetMap;
+
+class SheetsEnumeration : public SheetEnumeration_BASE
+{
+	SheetMap mSheetMap;
+	SheetMap::iterator mIt;
+public:
+	SheetsEnumeration( const SheetMap& sMap ) : mSheetMap( sMap ), mIt( mSheetMap.begin() ) {}
+	virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+	{
+		return ( mIt != mSheetMap.end() );
+	}
+	virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+	{
+		if ( !hasMoreElements() )
+			throw container::NoSuchElementException();
+		uno::Reference< sheet::XSpreadsheet > xSheet( *mIt++ );
+		return uno::makeAny( xSheet ) ;
+	}
+};
+
+class SheetCollectionHelper : public SheetCollectionHelper_BASE
+{
+	SheetMap mSheetMap;
+	SheetMap::iterator cachePos;
+public:
+	SheetCollectionHelper( const SheetMap& sMap ) : mSheetMap( sMap ), cachePos(0) {}
+	// XElementAccess
+	virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  sheet::XSpreadsheet::static_type(0); }
+	virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return ( mSheetMap.size() > 0 ); }
+	// XNameAcess 
+	virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+	{
+		if ( !hasByName(aName) )
+			throw container::NoSuchElementException();
+		return uno::makeAny( *cachePos );
+	}
+	virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+	{
+		uno::Sequence< rtl::OUString > sNames( mSheetMap.size() );
+		rtl::OUString* pString = sNames.getArray();
+		SheetMap::iterator it = mSheetMap.begin();
+		SheetMap::iterator it_end = mSheetMap.end();
+
+		for ( ; it != it_end; ++it, ++pString )
+		{
+			uno::Reference< container::XNamed > xName( *it, uno::UNO_QUERY_THROW );	
+			*pString = xName->getName();
+		}
+		return sNames;
+	}
+	virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+	{
+		cachePos = mSheetMap.begin();
+		SheetMap::iterator it_end = mSheetMap.end();
+		for ( ; cachePos != it_end; ++cachePos )
+		{
+			uno::Reference< container::XNamed > xName( *cachePos, uno::UNO_QUERY_THROW );	
+			if ( aName.equals( xName->getName() ) )
+				break;
+		}
+		return ( cachePos != it_end );
+	}
+
+	// XElementAccess
+	virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException) { return mSheetMap.size(); }	
+	virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+	{
+		if ( Index < 0 || Index >= getCount() )
+			throw lang::IndexOutOfBoundsException();
+	
+		return uno::makeAny( mSheetMap[ Index ] );
+
+	}
+	// XEnumerationAccess
+	virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+	{
+		return new SheetsEnumeration( mSheetMap );
+	}
+};
 
 class ActiveSheet : public ScVbaWorksheet
 {
@@ -274,17 +360,44 @@ ScVbaWorkbook::Sheets( const uno::Any& a
 {
 	return Worksheets( aIndex );
 }
+
+
+
 uno::Any SAL_CALL
 ScVbaWorkbook::Worksheets( const uno::Any& aIndex ) throw (uno::RuntimeException)
 {
 	uno::Reference< frame::XModel > xModel( getModel() );	
 	uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( xModel, uno::UNO_QUERY_THROW );
-	uno::Reference<sheet::XSpreadsheets > xSheets( xSpreadDoc->getSheets(), uno::UNO_QUERY_THROW );
+	uno::Reference<container::XIndexAccess > xSheets( xSpreadDoc->getSheets(), uno::UNO_QUERY_THROW );
 	uno::Reference< vba::XCollection > xWorkSheets(  new ScVbaWorksheets( this, mxContext, xSheets, xModel ) );
 	if (  aIndex.getValueTypeClass() == uno::TypeClass_VOID )
 	{
 		return uno::Any( xWorkSheets );	
 	}
+	else if (  aIndex.getValueTypeClass() == uno::TypeClass_SEQUENCE )
+	{
+		uno::Reference< script::XTypeConverter > xConverter = getTypeConverter(mxContext);
+		uno::Any aConverted;
+		aConverted = xConverter->convertTo( aIndex, getCppuType((uno::Sequence< uno::Any >*)0) );
+		SheetMap mSheets;
+		uno::Sequence< uno::Any > sIndices;
+		aConverted >>= sIndices;
+		sal_Int32 nElems = sIndices.getLength();
+		for( sal_Int32 index = 0; index < nElems; ++index )
+		{
+			uno::Reference< excel::XWorksheet > xWorkSheet( xWorkSheets->Item( sIndices[ index ], uno::Any() ), uno::UNO_QUERY_THROW );
+			ScVbaWorksheet* pWorkSheet = dynamic_cast< ScVbaWorksheet* >( xWorkSheet.get() );
+			if ( pWorkSheet )
+			{
+				uno::Reference< sheet::XSpreadsheet > xSheet( pWorkSheet->getSheet() , uno::UNO_QUERY_THROW );
+				uno::Reference< container::XNamed > xName( xSheet, uno::UNO_QUERY_THROW );
+				mSheets.push_back( xSheet );
+			}
+		}  
+		uno::Reference< container::XIndexAccess > xIndexAccess = new SheetCollectionHelper( mSheets );
+		uno::Reference< vba::XCollection > xSelectedSheets(  new ScVbaWorksheets( this, mxContext, xIndexAccess, xModel ) );
+		return uno::makeAny( xSelectedSheets );
+	}
 	return uno::Any( xWorkSheets->Item( aIndex, uno::Any() ) );
 }
 uno::Any SAL_CALL
